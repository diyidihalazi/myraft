// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef PROTOBUF_raft_2eproto__INCLUDED
#define PROTOBUF_raft_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_raft_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEntryImpl();
void InitDefaultsEntry();
void InitDefaultsSnapshotMetadataImpl();
void InitDefaultsSnapshotMetadata();
void InitDefaultsSnapshotImpl();
void InitDefaultsSnapshot();
void InitDefaultsMessageImpl();
void InitDefaultsMessage();
void InitDefaultsHardStateImpl();
void InitDefaultsHardState();
void InitDefaultsConfStateImpl();
void InitDefaultsConfState();
void InitDefaultsConfChangeImpl();
void InitDefaultsConfChange();
inline void InitDefaults() {
  InitDefaultsEntry();
  InitDefaultsSnapshotMetadata();
  InitDefaultsSnapshot();
  InitDefaultsMessage();
  InitDefaultsHardState();
  InitDefaultsConfState();
  InitDefaultsConfChange();
}
}  // namespace protobuf_raft_2eproto
namespace raftpb {
class ConfChange;
class ConfChangeDefaultTypeInternal;
extern ConfChangeDefaultTypeInternal _ConfChange_default_instance_;
class ConfState;
class ConfStateDefaultTypeInternal;
extern ConfStateDefaultTypeInternal _ConfState_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class HardState;
class HardStateDefaultTypeInternal;
extern HardStateDefaultTypeInternal _HardState_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Snapshot;
class SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class SnapshotMetadata;
class SnapshotMetadataDefaultTypeInternal;
extern SnapshotMetadataDefaultTypeInternal _SnapshotMetadata_default_instance_;
}  // namespace raftpb
namespace raftpb {

enum EntryType {
  EntryNormal = 0,
  EntryConfChange = 1,
  EntryType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EntryType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EntryType_IsValid(int value);
const EntryType EntryType_MIN = EntryNormal;
const EntryType EntryType_MAX = EntryConfChange;
const int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntryType_descriptor();
inline const ::std::string& EntryType_Name(EntryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntryType_descriptor(), value);
}
inline bool EntryType_Parse(
    const ::std::string& name, EntryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
enum MessageType {
  MsgHup = 0,
  MsgBeat = 1,
  MsgProp = 2,
  MsgApp = 3,
  MsgAppResp = 4,
  MsgVote = 5,
  MsgVoteResp = 6,
  MsgSnap = 7,
  MsgHeartbeat = 8,
  MsgHeartbeatResp = 9,
  MsgUnreachable = 10,
  MsgSnapStatus = 11,
  MsgCheckQuorum = 12,
  MsgTransferLeader = 13,
  MsgTimeoutNow = 14,
  MsgReadIndex = 15,
  MsgReadIndexResp = 16,
  MsgPreVote = 17,
  MsgPreVoteResp = 18,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = MsgHup;
const MessageType MessageType_MAX = MsgPreVoteResp;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ConfChangeType {
  ConfChangeAddNode = 0,
  ConfChangeRemoveNode = 1,
  ConfChangeUpdateNode = 2,
  ConfChangeAddLearnerNode = 3,
  ConfChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConfChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConfChangeType_IsValid(int value);
const ConfChangeType ConfChangeType_MIN = ConfChangeAddNode;
const ConfChangeType ConfChangeType_MAX = ConfChangeAddLearnerNode;
const int ConfChangeType_ARRAYSIZE = ConfChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConfChangeType_descriptor();
inline const ::std::string& ConfChangeType_Name(ConfChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConfChangeType_descriptor(), value);
}
inline bool ConfChangeType_Parse(
    const ::std::string& name, ConfChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfChangeType>(
    ConfChangeType_descriptor(), name, value);
}
// ===================================================================

class Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftpb.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const PROTOBUF_FINAL { return New(NULL); }

  Entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint64 Term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 Index = 3;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // .raftpb.EntryType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::raftpb::EntryType type() const;
  void set_type(::raftpb::EntryType value);

  // @@protoc_insertion_point(class_scope:raftpb.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 index_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
  friend void ::protobuf_raft_2eproto::InitDefaultsEntryImpl();
};
// -------------------------------------------------------------------

class SnapshotMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftpb.SnapshotMetadata) */ {
 public:
  SnapshotMetadata();
  virtual ~SnapshotMetadata();

  SnapshotMetadata(const SnapshotMetadata& from);

  inline SnapshotMetadata& operator=(const SnapshotMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotMetadata(SnapshotMetadata&& from) noexcept
    : SnapshotMetadata() {
    *this = ::std::move(from);
  }

  inline SnapshotMetadata& operator=(SnapshotMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotMetadata* internal_default_instance() {
    return reinterpret_cast<const SnapshotMetadata*>(
               &_SnapshotMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SnapshotMetadata* other);
  friend void swap(SnapshotMetadata& a, SnapshotMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  SnapshotMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnapshotMetadata& from);
  void MergeFrom(const SnapshotMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnapshotMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raftpb.ConfState ConfState = 1;
  bool has_confstate() const;
  void clear_confstate();
  static const int kConfStateFieldNumber = 1;
  const ::raftpb::ConfState& confstate() const;
  ::raftpb::ConfState* release_confstate();
  ::raftpb::ConfState* mutable_confstate();
  void set_allocated_confstate(::raftpb::ConfState* confstate);

  // uint64 Index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // uint64 Term = 3;
  void clear_term();
  static const int kTermFieldNumber = 3;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raftpb.SnapshotMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raftpb::ConfState* confstate_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 term_;
  mutable int _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
  friend void ::protobuf_raft_2eproto::InitDefaultsSnapshotMetadataImpl();
};
// -------------------------------------------------------------------

class Snapshot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftpb.Snapshot) */ {
 public:
  Snapshot();
  virtual ~Snapshot();

  Snapshot(const Snapshot& from);

  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Snapshot(Snapshot&& from) noexcept
    : Snapshot() {
    *this = ::std::move(from);
  }

  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Snapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
               &_Snapshot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Snapshot* other);
  friend void swap(Snapshot& a, Snapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snapshot* New() const PROTOBUF_FINAL { return New(NULL); }

  Snapshot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Snapshot& from);
  void MergeFrom(const Snapshot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Snapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .raftpb.SnapshotMetadata Metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::raftpb::SnapshotMetadata& metadata() const;
  ::raftpb::SnapshotMetadata* release_metadata();
  ::raftpb::SnapshotMetadata* mutable_metadata();
  void set_allocated_metadata(::raftpb::SnapshotMetadata* metadata);

  // @@protoc_insertion_point(class_scope:raftpb.Snapshot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::raftpb::SnapshotMetadata* metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
  friend void ::protobuf_raft_2eproto::InitDefaultsSnapshotImpl();
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftpb.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raftpb.Entry Entries = 7;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 7;
  const ::raftpb::Entry& entries(int index) const;
  ::raftpb::Entry* mutable_entries(int index);
  ::raftpb::Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::raftpb::Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::raftpb::Entry >&
      entries() const;

  // bytes Context = 12;
  void clear_context();
  static const int kContextFieldNumber = 12;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  #if LANG_CXX11
  void set_context(::std::string&& value);
  #endif
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // .raftpb.Snapshot Snapshot = 9;
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 9;
  const ::raftpb::Snapshot& snapshot() const;
  ::raftpb::Snapshot* release_snapshot();
  ::raftpb::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::raftpb::Snapshot* snapshot);

  // uint64 To = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  ::google::protobuf::uint64 to() const;
  void set_to(::google::protobuf::uint64 value);

  // uint64 From = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  ::google::protobuf::uint64 from() const;
  void set_from(::google::protobuf::uint64 value);

  // uint64 Term = 4;
  void clear_term();
  static const int kTermFieldNumber = 4;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 LogTerm = 5;
  void clear_logterm();
  static const int kLogTermFieldNumber = 5;
  ::google::protobuf::uint64 logterm() const;
  void set_logterm(::google::protobuf::uint64 value);

  // .raftpb.MessageType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::raftpb::MessageType type() const;
  void set_type(::raftpb::MessageType value);

  // bool Reject = 10;
  void clear_reject();
  static const int kRejectFieldNumber = 10;
  bool reject() const;
  void set_reject(bool value);

  // uint64 Index = 6;
  void clear_index();
  static const int kIndexFieldNumber = 6;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // uint64 Commit = 8;
  void clear_commit();
  static const int kCommitFieldNumber = 8;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // uint64 RejectHint = 11;
  void clear_rejecthint();
  static const int kRejectHintFieldNumber = 11;
  ::google::protobuf::uint64 rejecthint() const;
  void set_rejecthint(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raftpb.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::raftpb::Entry > entries_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::raftpb::Snapshot* snapshot_;
  ::google::protobuf::uint64 to_;
  ::google::protobuf::uint64 from_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 logterm_;
  int type_;
  bool reject_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 commit_;
  ::google::protobuf::uint64 rejecthint_;
  mutable int _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
  friend void ::protobuf_raft_2eproto::InitDefaultsMessageImpl();
};
// -------------------------------------------------------------------

class HardState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftpb.HardState) */ {
 public:
  HardState();
  virtual ~HardState();

  HardState(const HardState& from);

  inline HardState& operator=(const HardState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HardState(HardState&& from) noexcept
    : HardState() {
    *this = ::std::move(from);
  }

  inline HardState& operator=(HardState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HardState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HardState* internal_default_instance() {
    return reinterpret_cast<const HardState*>(
               &_HardState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(HardState* other);
  friend void swap(HardState& a, HardState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HardState* New() const PROTOBUF_FINAL { return New(NULL); }

  HardState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HardState& from);
  void MergeFrom(const HardState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HardState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 Term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 Vote = 2;
  void clear_vote();
  static const int kVoteFieldNumber = 2;
  ::google::protobuf::uint64 vote() const;
  void set_vote(::google::protobuf::uint64 value);

  // uint64 Commit = 3;
  void clear_commit();
  static const int kCommitFieldNumber = 3;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raftpb.HardState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 vote_;
  ::google::protobuf::uint64 commit_;
  mutable int _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
  friend void ::protobuf_raft_2eproto::InitDefaultsHardStateImpl();
};
// -------------------------------------------------------------------

class ConfState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftpb.ConfState) */ {
 public:
  ConfState();
  virtual ~ConfState();

  ConfState(const ConfState& from);

  inline ConfState& operator=(const ConfState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfState(ConfState&& from) noexcept
    : ConfState() {
    *this = ::std::move(from);
  }

  inline ConfState& operator=(ConfState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfState* internal_default_instance() {
    return reinterpret_cast<const ConfState*>(
               &_ConfState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ConfState* other);
  friend void swap(ConfState& a, ConfState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfState* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfState& from);
  void MergeFrom(const ConfState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 Nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::google::protobuf::uint64 nodes(int index) const;
  void set_nodes(int index, ::google::protobuf::uint64 value);
  void add_nodes(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      nodes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_nodes();

  // repeated uint64 Learners = 2;
  int learners_size() const;
  void clear_learners();
  static const int kLearnersFieldNumber = 2;
  ::google::protobuf::uint64 learners(int index) const;
  void set_learners(int index, ::google::protobuf::uint64 value);
  void add_learners(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      learners() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_learners();

  // @@protoc_insertion_point(class_scope:raftpb.ConfState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > nodes_;
  mutable int _nodes_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > learners_;
  mutable int _learners_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
  friend void ::protobuf_raft_2eproto::InitDefaultsConfStateImpl();
};
// -------------------------------------------------------------------

class ConfChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftpb.ConfChange) */ {
 public:
  ConfChange();
  virtual ~ConfChange();

  ConfChange(const ConfChange& from);

  inline ConfChange& operator=(const ConfChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfChange(ConfChange&& from) noexcept
    : ConfChange() {
    *this = ::std::move(from);
  }

  inline ConfChange& operator=(ConfChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfChange* internal_default_instance() {
    return reinterpret_cast<const ConfChange*>(
               &_ConfChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ConfChange* other);
  friend void swap(ConfChange& a, ConfChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfChange* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfChange& from);
  void MergeFrom(const ConfChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Context = 4;
  void clear_context();
  static const int kContextFieldNumber = 4;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  #if LANG_CXX11
  void set_context(::std::string&& value);
  #endif
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // uint64 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 NodeID = 3;
  void clear_nodeid();
  static const int kNodeIDFieldNumber = 3;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // .raftpb.ConfChangeType Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::raftpb::ConfChangeType type() const;
  void set_type(::raftpb::ConfChangeType value);

  // @@protoc_insertion_point(class_scope:raftpb.ConfChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 nodeid_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
  friend void ::protobuf_raft_2eproto::InitDefaultsConfChangeImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// uint64 Term = 2;
inline void Entry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.Term)
  return term_;
}
inline void Entry::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Entry.Term)
}

// uint64 Index = 3;
inline void Entry::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Entry::index() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.Index)
  return index_;
}
inline void Entry::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Entry.Index)
}

// .raftpb.EntryType Type = 1;
inline void Entry::clear_type() {
  type_ = 0;
}
inline ::raftpb::EntryType Entry::type() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.Type)
  return static_cast< ::raftpb::EntryType >(type_);
}
inline void Entry::set_type(::raftpb::EntryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Entry.Type)
}

// bytes Data = 4;
inline void Entry::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::data() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.Data)
  return data_.GetNoArena();
}
inline void Entry::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.Entry.Data)
}
#if LANG_CXX11
inline void Entry::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.Entry.Data)
}
#endif
inline void Entry::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.Entry.Data)
}
inline void Entry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.Entry.Data)
}
inline ::std::string* Entry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.Entry.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_data() {
  // @@protoc_insertion_point(field_release:raftpb.Entry.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:raftpb.Entry.Data)
}

// -------------------------------------------------------------------

// SnapshotMetadata

// .raftpb.ConfState ConfState = 1;
inline bool SnapshotMetadata::has_confstate() const {
  return this != internal_default_instance() && confstate_ != NULL;
}
inline void SnapshotMetadata::clear_confstate() {
  if (GetArenaNoVirtual() == NULL && confstate_ != NULL) {
    delete confstate_;
  }
  confstate_ = NULL;
}
inline const ::raftpb::ConfState& SnapshotMetadata::confstate() const {
  const ::raftpb::ConfState* p = confstate_;
  // @@protoc_insertion_point(field_get:raftpb.SnapshotMetadata.ConfState)
  return p != NULL ? *p : *reinterpret_cast<const ::raftpb::ConfState*>(
      &::raftpb::_ConfState_default_instance_);
}
inline ::raftpb::ConfState* SnapshotMetadata::release_confstate() {
  // @@protoc_insertion_point(field_release:raftpb.SnapshotMetadata.ConfState)
  
  ::raftpb::ConfState* temp = confstate_;
  confstate_ = NULL;
  return temp;
}
inline ::raftpb::ConfState* SnapshotMetadata::mutable_confstate() {
  
  if (confstate_ == NULL) {
    confstate_ = new ::raftpb::ConfState;
  }
  // @@protoc_insertion_point(field_mutable:raftpb.SnapshotMetadata.ConfState)
  return confstate_;
}
inline void SnapshotMetadata::set_allocated_confstate(::raftpb::ConfState* confstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete confstate_;
  }
  if (confstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      confstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confstate, submessage_arena);
    }
    
  } else {
    
  }
  confstate_ = confstate;
  // @@protoc_insertion_point(field_set_allocated:raftpb.SnapshotMetadata.ConfState)
}

// uint64 Index = 2;
inline void SnapshotMetadata::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SnapshotMetadata::index() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotMetadata.Index)
  return index_;
}
inline void SnapshotMetadata::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotMetadata.Index)
}

// uint64 Term = 3;
inline void SnapshotMetadata::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SnapshotMetadata::term() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotMetadata.Term)
  return term_;
}
inline void SnapshotMetadata::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotMetadata.Term)
}

// -------------------------------------------------------------------

// Snapshot

// bytes Data = 1;
inline void Snapshot::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Snapshot::data() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.Data)
  return data_.GetNoArena();
}
inline void Snapshot::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.Data)
}
#if LANG_CXX11
inline void Snapshot::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.Snapshot.Data)
}
#endif
inline void Snapshot::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.Snapshot.Data)
}
inline void Snapshot::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.Snapshot.Data)
}
inline ::std::string* Snapshot::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.Snapshot.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Snapshot::release_data() {
  // @@protoc_insertion_point(field_release:raftpb.Snapshot.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Snapshot::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:raftpb.Snapshot.Data)
}

// .raftpb.SnapshotMetadata Metadata = 2;
inline bool Snapshot::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline void Snapshot::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
}
inline const ::raftpb::SnapshotMetadata& Snapshot::metadata() const {
  const ::raftpb::SnapshotMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.Metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::raftpb::SnapshotMetadata*>(
      &::raftpb::_SnapshotMetadata_default_instance_);
}
inline ::raftpb::SnapshotMetadata* Snapshot::release_metadata() {
  // @@protoc_insertion_point(field_release:raftpb.Snapshot.Metadata)
  
  ::raftpb::SnapshotMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline ::raftpb::SnapshotMetadata* Snapshot::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::raftpb::SnapshotMetadata;
  }
  // @@protoc_insertion_point(field_mutable:raftpb.Snapshot.Metadata)
  return metadata_;
}
inline void Snapshot::set_allocated_metadata(::raftpb::SnapshotMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:raftpb.Snapshot.Metadata)
}

// -------------------------------------------------------------------

// Message

// .raftpb.MessageType Type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::raftpb::MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.Type)
  return static_cast< ::raftpb::MessageType >(type_);
}
inline void Message::set_type(::raftpb::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.Type)
}

// uint64 To = 2;
inline void Message::clear_to() {
  to_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::to() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.To)
  return to_;
}
inline void Message::set_to(::google::protobuf::uint64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.To)
}

// uint64 From = 3;
inline void Message::clear_from() {
  from_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::from() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.From)
  return from_;
}
inline void Message::set_from(::google::protobuf::uint64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.From)
}

// uint64 Term = 4;
inline void Message::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::term() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.Term)
  return term_;
}
inline void Message::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.Term)
}

// uint64 LogTerm = 5;
inline void Message::clear_logterm() {
  logterm_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::logterm() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.LogTerm)
  return logterm_;
}
inline void Message::set_logterm(::google::protobuf::uint64 value) {
  
  logterm_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.LogTerm)
}

// uint64 Index = 6;
inline void Message::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::index() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.Index)
  return index_;
}
inline void Message::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.Index)
}

// repeated .raftpb.Entry Entries = 7;
inline int Message::entries_size() const {
  return entries_.size();
}
inline void Message::clear_entries() {
  entries_.Clear();
}
inline const ::raftpb::Entry& Message::entries(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.Message.Entries)
  return entries_.Get(index);
}
inline ::raftpb::Entry* Message::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raftpb.Message.Entries)
  return entries_.Mutable(index);
}
inline ::raftpb::Entry* Message::add_entries() {
  // @@protoc_insertion_point(field_add:raftpb.Message.Entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::raftpb::Entry >*
Message::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.Message.Entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::raftpb::Entry >&
Message::entries() const {
  // @@protoc_insertion_point(field_list:raftpb.Message.Entries)
  return entries_;
}

// uint64 Commit = 8;
inline void Message::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::commit() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.Commit)
  return commit_;
}
inline void Message::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.Commit)
}

// .raftpb.Snapshot Snapshot = 9;
inline bool Message::has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != NULL;
}
inline void Message::clear_snapshot() {
  if (GetArenaNoVirtual() == NULL && snapshot_ != NULL) {
    delete snapshot_;
  }
  snapshot_ = NULL;
}
inline const ::raftpb::Snapshot& Message::snapshot() const {
  const ::raftpb::Snapshot* p = snapshot_;
  // @@protoc_insertion_point(field_get:raftpb.Message.Snapshot)
  return p != NULL ? *p : *reinterpret_cast<const ::raftpb::Snapshot*>(
      &::raftpb::_Snapshot_default_instance_);
}
inline ::raftpb::Snapshot* Message::release_snapshot() {
  // @@protoc_insertion_point(field_release:raftpb.Message.Snapshot)
  
  ::raftpb::Snapshot* temp = snapshot_;
  snapshot_ = NULL;
  return temp;
}
inline ::raftpb::Snapshot* Message::mutable_snapshot() {
  
  if (snapshot_ == NULL) {
    snapshot_ = new ::raftpb::Snapshot;
  }
  // @@protoc_insertion_point(field_mutable:raftpb.Message.Snapshot)
  return snapshot_;
}
inline void Message::set_allocated_snapshot(::raftpb::Snapshot* snapshot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete snapshot_;
  }
  if (snapshot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      snapshot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:raftpb.Message.Snapshot)
}

// bool Reject = 10;
inline void Message::clear_reject() {
  reject_ = false;
}
inline bool Message::reject() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.Reject)
  return reject_;
}
inline void Message::set_reject(bool value) {
  
  reject_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.Reject)
}

// uint64 RejectHint = 11;
inline void Message::clear_rejecthint() {
  rejecthint_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::rejecthint() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.RejectHint)
  return rejecthint_;
}
inline void Message::set_rejecthint(::google::protobuf::uint64 value) {
  
  rejecthint_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.RejectHint)
}

// bytes Context = 12;
inline void Message::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::context() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.Context)
  return context_.GetNoArena();
}
inline void Message::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.Message.Context)
}
#if LANG_CXX11
inline void Message::set_context(::std::string&& value) {
  
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.Message.Context)
}
#endif
inline void Message::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.Message.Context)
}
inline void Message::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.Message.Context)
}
inline ::std::string* Message::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.Message.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_context() {
  // @@protoc_insertion_point(field_release:raftpb.Message.Context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:raftpb.Message.Context)
}

// -------------------------------------------------------------------

// HardState

// uint64 Term = 1;
inline void HardState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HardState::term() const {
  // @@protoc_insertion_point(field_get:raftpb.HardState.Term)
  return term_;
}
inline void HardState::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raftpb.HardState.Term)
}

// uint64 Vote = 2;
inline void HardState::clear_vote() {
  vote_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HardState::vote() const {
  // @@protoc_insertion_point(field_get:raftpb.HardState.Vote)
  return vote_;
}
inline void HardState::set_vote(::google::protobuf::uint64 value) {
  
  vote_ = value;
  // @@protoc_insertion_point(field_set:raftpb.HardState.Vote)
}

// uint64 Commit = 3;
inline void HardState::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HardState::commit() const {
  // @@protoc_insertion_point(field_get:raftpb.HardState.Commit)
  return commit_;
}
inline void HardState::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:raftpb.HardState.Commit)
}

// -------------------------------------------------------------------

// ConfState

// repeated uint64 Nodes = 1;
inline int ConfState::nodes_size() const {
  return nodes_.size();
}
inline void ConfState::clear_nodes() {
  nodes_.Clear();
}
inline ::google::protobuf::uint64 ConfState::nodes(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.ConfState.Nodes)
  return nodes_.Get(index);
}
inline void ConfState::set_nodes(int index, ::google::protobuf::uint64 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:raftpb.ConfState.Nodes)
}
inline void ConfState::add_nodes(::google::protobuf::uint64 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:raftpb.ConfState.Nodes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ConfState::nodes() const {
  // @@protoc_insertion_point(field_list:raftpb.ConfState.Nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ConfState::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.ConfState.Nodes)
  return &nodes_;
}

// repeated uint64 Learners = 2;
inline int ConfState::learners_size() const {
  return learners_.size();
}
inline void ConfState::clear_learners() {
  learners_.Clear();
}
inline ::google::protobuf::uint64 ConfState::learners(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.ConfState.Learners)
  return learners_.Get(index);
}
inline void ConfState::set_learners(int index, ::google::protobuf::uint64 value) {
  learners_.Set(index, value);
  // @@protoc_insertion_point(field_set:raftpb.ConfState.Learners)
}
inline void ConfState::add_learners(::google::protobuf::uint64 value) {
  learners_.Add(value);
  // @@protoc_insertion_point(field_add:raftpb.ConfState.Learners)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ConfState::learners() const {
  // @@protoc_insertion_point(field_list:raftpb.ConfState.Learners)
  return learners_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ConfState::mutable_learners() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.ConfState.Learners)
  return &learners_;
}

// -------------------------------------------------------------------

// ConfChange

// uint64 ID = 1;
inline void ConfChange::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ConfChange::id() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChange.ID)
  return id_;
}
inline void ConfChange::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.ConfChange.ID)
}

// .raftpb.ConfChangeType Type = 2;
inline void ConfChange::clear_type() {
  type_ = 0;
}
inline ::raftpb::ConfChangeType ConfChange::type() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChange.Type)
  return static_cast< ::raftpb::ConfChangeType >(type_);
}
inline void ConfChange::set_type(::raftpb::ConfChangeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raftpb.ConfChange.Type)
}

// uint64 NodeID = 3;
inline void ConfChange::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ConfChange::nodeid() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChange.NodeID)
  return nodeid_;
}
inline void ConfChange::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:raftpb.ConfChange.NodeID)
}

// bytes Context = 4;
inline void ConfChange::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfChange::context() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChange.Context)
  return context_.GetNoArena();
}
inline void ConfChange::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.ConfChange.Context)
}
#if LANG_CXX11
inline void ConfChange::set_context(::std::string&& value) {
  
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.ConfChange.Context)
}
#endif
inline void ConfChange::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.ConfChange.Context)
}
inline void ConfChange::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.ConfChange.Context)
}
inline ::std::string* ConfChange::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.ConfChange.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfChange::release_context() {
  // @@protoc_insertion_point(field_release:raftpb.ConfChange.Context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfChange::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:raftpb.ConfChange.Context)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftpb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::raftpb::EntryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::EntryType>() {
  return ::raftpb::EntryType_descriptor();
}
template <> struct is_proto_enum< ::raftpb::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::MessageType>() {
  return ::raftpb::MessageType_descriptor();
}
template <> struct is_proto_enum< ::raftpb::ConfChangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::ConfChangeType>() {
  return ::raftpb::ConfChangeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_2eproto__INCLUDED
